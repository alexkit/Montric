1.1.0 - Executable WAR file

* Made the WAR file an executable instead of a ZIP file. Simplifies deployment a LOT. 
* Adding EurekaJApplicationServices to API so that plugins can request resources and information from EurekaJ Manager.
* Removing the need for the jetty.xml file. Adding jetty.maxThreads to the configFile instead.
* Removing the need for the config.properties file, using sensible defaults instead
* Removing the need for the users.properties file, using default users 'user' and 'admin'
* Made a requirement that -Xmx is set to a minimum of 512MB. 
* Removed the eurekaJ.managerServer project entirely 
* Fixed typo in expected deleteStatsOlderThanDays
* Upgrading to Jetty 8.1.2

1.0.5 - Alert Plugin Architecture, Faster Database Structure, CollectD integration

* Updated and finalized the Alert Plugin Architecture. 
* Added Plugin to integrate with Nexmo SMS service. 
* Added a new plugin BerkeleyHour that structures the data more efficiently. Effectively reducing the storage requirements by a factor of 10-30x. 
* Changed the way application is assembled
* Moved the plugins into their own GitHub Repo https://github.com/joachimhs/EurekaJPlugins
* Holding off further SproutCore 2.0 work, as SproutCore 2 migrates over to "Amber"
* Fixing bug where EurekaJ Manager would not load any other database plugin than "Berkeley"
* Added Jetty server to EurekaJ.Proxy to enable listening for incoming calls via Plain Text Protocol (CollectD Integration) http://collectd.org/wiki/index.php/Plain_text_protoco
* Changed the way the Jetty application is started for EurekaJ.Manager

1.0.3 - cache sizing options and node deletion 

* Adding cache sizing options to the Berkeley DB plugin
* Adding deletion of TreeMenu nodes via the administration menu
* Restructuring the SproutCore app, so that the SC Buildtools isnt required to develop EurekaJ
* Started work on the SproutCore 2.0 port of the application

1.0.2 - Alert Plugin Phase 1

* Changed sending email via a plugin instead of via code internal to the manager (https://github.com/joachimhs/EurekaJ/issues/13)
* Moved away from System.out and System.err (about time) to Log4J
* Upgraded to Jetty 8.0.2.v20111006
* Added Alerts to the main Tree menu (https://github.com/joachimhs/EurekaJ/issues/17)

1.0.1 - Bug Fixes - 14. September 2011

EurekaJ Manager: 

* Fixed issue with selecting SSL. Changes to checkbox instead of text input field.
* Changed email server password field to its proper type - a password field :) 

1.0 Final - Initial Release - 8. September 2011

The initial release comes with all of the necessary features required to perform basic application profiling. The most important features include: 

EurekaJ Manager:

* Logging in and user authentication via Spring Security. 
* Viewing charts for gathered statistics for all leaf-nodes
* Viewing tables with aggregated information for all non-leaf nodes
* Grouping charts into chart groups and viewing chart groups alongside normal charts
* Creating alert thresholds and viewing alerts alongside normal charts
* Setup of Email Recipient Groups that will receive notifications when alert thresholds are breached
* Ability to delete Alerts, Chart Groups and Email Recipients
* An Incoming REST-ish API that is used to gather incoming statistics, as well as to transfer information to the client application
* A Rich Internet Application GUI layer, built with SproutCore, providing the user with a consistent view of the gathered metrics
* Ability to view Live Statistics, updated in real-time (at most every 15 seconds), up to 24 hours back.
* Ability to view Historical Statistics in the same manner as the live statistics
* A List of all alerts triggered within the last 90 minutes
* The ability to select a different timezone. Useful if the server resides in a different timezone than the user

EurekaJ Proxy: 

* The ability to parse output from BTrace
* The ability to log into the EurekaJ Manager application through the Spring Security Web-Form
* The ability to pass in parsed BTrace output to EurekaJ Manager 

Misc: 

* A Bash-Script to be able to log used disk space.
* Run scripts for both EurekaJ Manager and EurekaJ Proxy
* Setup scripts for both EurekaJ Manager, EurekaJ Proxy and BTrace  